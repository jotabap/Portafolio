import type { APIRoute } from 'astro';

export const prerender = false;

export const POST: APIRoute = async ({ request }) => {
  console.log('üöÄ Chat API endpoint called');
  
  try {
    const body = await request.text();
    console.log('üì• Request body length:', body.length);
    console.log('üì• Request body:', body);
    
    if (!body || body.length === 0) {
      console.error('‚ùå Empty request body');
      return new Response(JSON.stringify({ error: 'Empty request body' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    let parsedBody;
    try {
      parsedBody = JSON.parse(body);
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError);
      console.error('‚ùå Raw body was:', JSON.stringify(body));
      return new Response(JSON.stringify({ error: 'Invalid JSON format' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    const { message } = parsedBody;
    console.log('üí¨ Message received:', message);
    
    if (!message) {
      console.log('‚ùå No message provided');
      return new Response(JSON.stringify({ error: 'Message is required' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Verificaci√≥n r√°pida de contexto - solo para preguntas muy fuera de tema
    const veryOffTopicKeywords = [
      'receta', 'cocinar', 'medicina', 'doctor', 'enfermedad', 's√≠ntoma',
      'tutorial programaci√≥n', 'c√≥mo programar', 'aprende a programar',
      'noticias', 'pol√≠tica', 'elecciones', 'gobierno'
    ];

    const messageLower = message.toLowerCase();
    const hasVeryOffTopicKeywords = veryOffTopicKeywords.some(keyword => messageLower.includes(keyword));

    // Solo rechazar preguntas muy espec√≠ficas fuera de tema
    if (hasVeryOffTopicKeywords) {
      console.log('üö´ Pregunta muy fuera de contexto detectada');
      return new Response(JSON.stringify({ 
        answer: 'Prefiero enfocarme en preguntas sobre John Batista y su experiencia profesional. ¬øHay algo espec√≠fico que te gustar√≠a saber sobre √©l?',
        sources: []
      }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Configuraci√≥n de Azure desde variables de entorno
    const azureEndpoint = import.meta.env.AZURE_OPENAI_ENDPOINT;
    const apiKey = import.meta.env.AZURE_OPENAI_API_KEY;
    const deploymentName = import.meta.env.AZURE_OPENAI_DEPLOYMENT_NAME;
    const embeddingDeployment = import.meta.env.AZURE_OPENAI_EMBEDDING_DEPLOYMENT;
    const apiVersion = import.meta.env.AZURE_OPENAI_API_VERSION;
    
    // Configuraci√≥n de Azure Search desde variables de entorno
    const searchEndpoint = import.meta.env.AZURE_SEARCH_ENDPOINT;
    const searchKey = import.meta.env.AZURE_SEARCH_ADMIN_KEY;
    const searchIndex = import.meta.env.AZURE_SEARCH_INDEX_NAME;

    // Validar que todas las variables est√©n configuradas
    if (!azureEndpoint || !apiKey || !deploymentName || !embeddingDeployment || !searchEndpoint || !searchKey || !searchIndex) {
      console.error('‚ùå Faltan variables de entorno de Azure');
      return new Response(JSON.stringify({ 
        answer: 'Error de configuraci√≥n del servicio. Por favor, verifica las variables de entorno.',
        sources: []
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    console.log('üîß Config cargada desde variables de entorno');

    // 1. Generar embedding para la consulta del usuario
    console.log('üîç Generando embedding para la consulta...');
    const embeddingUrl = `${azureEndpoint}openai/deployments/${embeddingDeployment}/embeddings?api-version=${apiVersion}`;
    
    let searchResults = [];
    let sources = [];
    
    try {
      const embeddingResponse = await fetch(embeddingUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'api-key': apiKey
        },
        body: JSON.stringify({
          input: message
        })
      });

      if (embeddingResponse.ok) {
        const embeddingData = await embeddingResponse.json();
        const queryEmbedding = embeddingData.data[0].embedding;
        console.log('‚úÖ Embedding generado exitosamente');

        // 2. B√∫squeda vectorial en Azure AI Search
        console.log('üîç Realizando b√∫squeda vectorial...');
        const searchUrl = `${searchEndpoint}/indexes/${searchIndex}/docs/search?api-version=2024-07-01`;
        
        const searchResponse = await fetch(searchUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'api-key': searchKey
          },
          body: JSON.stringify({
            count: true,
            top: 3,
            vectorQueries: [{
              vector: queryEmbedding,
              fields: "embeddings",
              kind: "vector",
              k: 3
            }]
          })
        });

        if (searchResponse.ok) {
          const searchData = await searchResponse.json();
          searchResults = searchData.value || [];
          console.log(`üìö Encontrados ${searchResults.length} documentos relevantes`);
          
          // Preparar fuentes para la respuesta  
          sources = searchResults.map((result: any) => ({
            title: result.sources || 'Documento',
            url: null
          }));
        } else {
          const errorText = await searchResponse.text();
          console.log('‚ö†Ô∏è Error en b√∫squeda:', searchResponse.status, errorText);
        }
      } else {
        const errorText = await embeddingResponse.text();
        console.log('‚ö†Ô∏è Error generando embedding:', embeddingResponse.status, errorText);
      }
    } catch (searchError) {
      console.log('‚ö†Ô∏è Error en b√∫squeda, continuando sin contexto espec√≠fico:', searchError);
    }

    // 3. Preparar contexto para el chat
    let systemContent = `Eres un asistente inteligente que act√∫a como representante de John Batista en su portafolio profesional.

COMPORTAMIENTO PRINCIPAL:
- Responder principalmente sobre John Batista: experiencia, proyectos, habilidades, carrera
- Para preguntas generales simples (saludos, idiomas, preguntas b√°sicas): responder brevemente y redirigir hacia John
- Para preguntas muy espec√≠ficas fuera de tema: redirigir educadamente hacia John

IMPORTANTE - IDIOMA DE RESPUESTA:
- Si la pregunta est√° en INGL√âS ‚Üí responder en INGL√âS
- Si la pregunta est√° en ESPA√ëOL ‚Üí responder en ESPA√ëOL
- Detectar autom√°ticamente el idioma de la pregunta y responder en el mismo idioma

EJEMPLOS DE RESPUESTAS:
- "Do you speak English?" ‚Üí "Yes, I can communicate in English. I'm here to help you learn about John Batista's professional experience. What would you like to know about him?"
- "Who is John?" ‚Üí "John Batista is a skilled developer and programmer. I'm here to provide information about his professional experience, projects, and skills. What specifically would you like to know about him?"
- "¬øHablas espa√±ol?" ‚Üí "S√≠, puedo comunicarme en espa√±ol. Estoy aqu√≠ para ayudarte a conocer sobre la experiencia profesional de John Batista. ¬øQu√© te gustar√≠a saber sobre √©l?"
- "¬øQui√©n es John?" ‚Üí "John Batista es un desarrollador experimentado. Estoy aqu√≠ para proporcionarte informaci√≥n sobre su experiencia profesional, proyectos y habilidades. ¬øQu√© te gustar√≠a saber espec√≠ficamente sobre √©l?"

Para preguntas sobre John: usar la informaci√≥n disponible para dar respuestas completas y detalladas EN EL MISMO IDIOMA de la pregunta.
Para preguntas muy espec√≠ficas fuera de tema: redirigir educadamente EN EL MISMO IDIOMA.

Mant√©n un tono profesional y amigable.`;
    
    if (searchResults.length > 0) {
      const context = searchResults.map((result: any) => result.content).join('\n\n');
      systemContent += `\n\nüìö INFORMACI√ìN DISPONIBLE SOBRE JOHN:\n${context}\n\nUsa √öNICAMENTE esta informaci√≥n para responder. Si la pregunta es sobre John pero no puedes responderla con esta informaci√≥n, di que no tienes esa informaci√≥n espec√≠fica EN EL MISMO IDIOMA de la pregunta.`;
      console.log('üìù Contexto agregado al prompt');
    } else {
      systemContent += '\n\n‚ö†Ô∏è No se encontr√≥ informaci√≥n espec√≠fica para esta consulta. Para preguntas generales simples, responde brevemente y redirige hacia John EN EL MISMO IDIOMA. Para preguntas espec√≠ficas sobre John, di que no tienes esa informaci√≥n EN EL MISMO IDIOMA.';
    }
    
    // Llamada directa a Azure OpenAI
    const chatUrl = `${azureEndpoint}openai/deployments/${deploymentName}/chat/completions?api-version=${apiVersion}`;
    console.log('üåê Making request to:', chatUrl);
    
    const requestBody = {
      messages: [
        {
          role: 'system',
          content: systemContent
        },
        {
          role: 'user', 
          content: message
        }
      ],
      max_tokens: 500,
      temperature: 0.7
    };
    
    console.log('üì§ Request body for Azure:', JSON.stringify(requestBody, null, 2));
    
    const chatResponse = await fetch(chatUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'api-key': apiKey
      },
      body: JSON.stringify(requestBody)
    });

    console.log('üìà Azure response status:', chatResponse.status);

    if (!chatResponse.ok) {
      const errorText = await chatResponse.text();
      console.error('‚ùå Azure OpenAI error:', errorText);
      throw new Error(`Azure OpenAI error: ${chatResponse.status} - ${errorText}`);
    }

    const chatData = await chatResponse.json();
    console.log('‚úÖ Azure response data:', JSON.stringify(chatData, null, 2));
    
    const answer = chatData.choices[0]?.message?.content || 'No pude generar una respuesta.';
    
    const responseData = { 
      answer,
      sources: sources // Incluir las fuentes reales de la b√∫squeda
    };
    
    console.log('üì§ Sending response:', responseData);
    
    return new Response(JSON.stringify(responseData), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('üí• Chat API error:', error);
    
    const errorResponse = { 
      error: 'Error procesando el mensaje',
      details: error instanceof Error ? error.message : 'Unknown error'
    };
    
    console.log('üì§ Sending error response:', errorResponse);
    
    return new Response(JSON.stringify(errorResponse), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
};
