const { app } = require('@azure/functions');

app.http('chat', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    handler: async (request, context) => {
        context.log('üöÄ Chat API endpoint called');
        
        if (request.method === 'GET') {
            return { 
                status: 200,
                body: JSON.stringify({ message: 'Chat API is running' }),
                headers: { 'Content-Type': 'application/json' }
            };
        }

        try {
            const body = await request.text();
            context.log('üì• Request body length:', body.length);
            
            if (!body) {
                context.log('‚ùå No request body received');
                return {
                    status: 400,
                    body: JSON.stringify({ 
                        answer: 'No se recibi√≥ mensaje. Por favor, env√≠a tu pregunta.',
                        sources: []
                    }),
                    headers: { 'Content-Type': 'application/json' }
                };
            }

            let message;
            try {
                const parsed = JSON.parse(body);
                message = parsed.message;
                context.log('üìù Message received:', message?.substring(0, 100) + '...');
            } catch (e) {
                context.log('‚ùå Error parsing JSON:', e.message);
                return {
                    status: 400,
                    body: JSON.stringify({ 
                        answer: 'Error al procesar el mensaje. Por favor, verifica el formato.',
                        sources: []
                    }),
                    headers: { 'Content-Type': 'application/json' }
                };
            }

            if (!message || typeof message !== 'string' || message.trim().length === 0) {
                context.log('‚ùå Invalid message received');
                return {
                    status: 400,
                    body: JSON.stringify({ 
                        answer: 'Por favor, env√≠a un mensaje v√°lido.',
                        sources: []
                    }),
                    headers: { 'Content-Type': 'application/json' }
                };
            }

            // Verificaci√≥n r√°pida de contexto - solo para preguntas muy fuera de tema
            const veryOffTopicKeywords = [
                'receta', 'cocinar', 'medicina', 'doctor', 'enfermedad', 's√≠ntoma',
                'tutorial programaci√≥n', 'c√≥mo programar', 'aprende a programar',
                'noticias', 'pol√≠tica', 'elecciones', 'gobierno'
            ];

            const messageLower = message.toLowerCase();
            const hasVeryOffTopicKeywords = veryOffTopicKeywords.some(keyword => messageLower.includes(keyword));

            // Solo rechazar preguntas muy espec√≠ficas fuera de tema
            if (hasVeryOffTopicKeywords) {
                context.log('üö´ Pregunta muy fuera de contexto detectada');
                return {
                    status: 200,
                    body: JSON.stringify({ 
                        answer: 'Prefiero enfocarme en preguntas sobre John Batista y su experiencia profesional. ¬øHay algo espec√≠fico que te gustar√≠a saber sobre √©l?',
                        sources: []
                    }),
                    headers: { 'Content-Type': 'application/json' }
                };
            }

            // Configuraci√≥n de Azure desde variables de entorno
            const azureEndpoint = process.env.AZURE_OPENAI_ENDPOINT;
            const apiKey = process.env.AZURE_OPENAI_API_KEY;
            const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_CHAT;
            const embeddingDeployment = process.env.AZURE_OPENAI_DEPLOYMENT_EMBED;
            const apiVersion = process.env.AZURE_OPENAI_API_VERSION || '2024-02-15-preview';
            
            // Configuraci√≥n de Azure Search desde variables de entorno
            const searchEndpoint = process.env.AZURE_SEARCH_ENDPOINT;
            const searchKey = process.env.AZURE_SEARCH_KEY;
            const searchIndex = process.env.AZURE_SEARCH_INDEX;

            context.log('üîß Environment variables check:');
            context.log(`- AZURE_OPENAI_ENDPOINT: ${azureEndpoint ? 'SET' : 'MISSING'}`);
            context.log(`- AZURE_OPENAI_API_KEY: ${apiKey ? 'SET' : 'MISSING'}`);
            context.log(`- AZURE_OPENAI_DEPLOYMENT_CHAT: ${deploymentName ? 'SET' : 'MISSING'}`);
            context.log(`- AZURE_OPENAI_DEPLOYMENT_EMBED: ${embeddingDeployment ? 'SET' : 'MISSING'}`);
            context.log(`- AZURE_SEARCH_ENDPOINT: ${searchEndpoint ? 'SET' : 'MISSING'}`);
            context.log(`- AZURE_SEARCH_KEY: ${searchKey ? 'SET' : 'MISSING'}`);
            context.log(`- AZURE_SEARCH_INDEX: ${searchIndex ? 'SET' : 'MISSING'}`);

            // Validar que todas las variables est√©n configuradas
            if (!azureEndpoint || !apiKey || !deploymentName || !embeddingDeployment || !searchEndpoint || !searchKey || !searchIndex) {
                context.log('‚ùå Faltan variables de entorno de Azure');
                const missingVars = [];
                if (!azureEndpoint) missingVars.push('AZURE_OPENAI_ENDPOINT');
                if (!apiKey) missingVars.push('AZURE_OPENAI_API_KEY');
                if (!deploymentName) missingVars.push('AZURE_OPENAI_DEPLOYMENT_CHAT');
                if (!embeddingDeployment) missingVars.push('AZURE_OPENAI_DEPLOYMENT_EMBED');
                if (!searchEndpoint) missingVars.push('AZURE_SEARCH_ENDPOINT');
                if (!searchKey) missingVars.push('AZURE_SEARCH_KEY');
                if (!searchIndex) missingVars.push('AZURE_SEARCH_INDEX');
                context.log(`Missing vars: ${missingVars.join(', ')}`);
                
                return {
                    status: 500,
                    body: JSON.stringify({ 
                        answer: 'Error de configuraci√≥n del servicio. Variables de entorno faltantes: ' + missingVars.join(', '),
                        sources: []
                    }),
                    headers: { 'Content-Type': 'application/json' }
                };
            }
            
            context.log('üîß Config cargada desde variables de entorno');

            // 1. Generar embedding para la consulta del usuario
            context.log('üîç Generando embedding para la consulta...');
            const embeddingUrl = `${azureEndpoint}openai/deployments/${embeddingDeployment}/embeddings?api-version=${apiVersion}`;
            
            let searchResults = [];
            let sources = [];
            
            try {
                const embeddingResponse = await fetch(embeddingUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'api-key': apiKey
                    },
                    body: JSON.stringify({
                        input: message
                    })
                });

                if (embeddingResponse.ok) {
                    const embeddingData = await embeddingResponse.json();
                    const queryEmbedding = embeddingData.data[0].embedding;
                    context.log('‚úÖ Embedding generado exitosamente');

                    // 2. B√∫squeda vectorial en Azure AI Search
                    context.log('üîç Realizando b√∫squeda vectorial...');
                    const searchUrl = `${searchEndpoint}/indexes/${searchIndex}/docs/search?api-version=2024-07-01`;
                    
                    const searchResponse = await fetch(searchUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'api-key': searchKey
                        },
                        body: JSON.stringify({
                            vectorQueries: [
                                {
                                    vector: queryEmbedding,
                                    k: 5,
                                    fields: "content_vector",
                                    kind: "vector"
                                }
                            ],
                            select: "content,source,chunk_id",
                            top: 5
                        })
                    });

                    if (searchResponse.ok) {
                        const searchData = await searchResponse.json();
                        searchResults = searchData.value || [];
                        sources = searchResults.map((result, index) => ({
                            id: index + 1,
                            title: result.source || 'Documento',
                            chunk: result.chunk_id || 'Fragmento'
                        }));
                        context.log(`‚úÖ B√∫squeda completada, ${searchResults.length} resultados encontrados`);
                    } else {
                        const errorText = await searchResponse.text();
                        context.log('‚ö†Ô∏è Error en b√∫squeda vectorial:', searchResponse.status, errorText);
                    }
                } else {
                    const errorText = await embeddingResponse.text();
                    context.log('‚ö†Ô∏è Error generando embedding:', embeddingResponse.status, errorText);
                }
            } catch (searchError) {
                context.log('‚ö†Ô∏è Error en b√∫squeda, continuando sin contexto espec√≠fico:', searchError);
            }

            // 3. Preparar contexto para el chat
            let systemContent = `Eres un asistente inteligente que act√∫a como representante de John Batista en su portafolio profesional.

COMPORTAMIENTO PRINCIPAL:
- Responder principalmente sobre John Batista: experiencia, proyectos, habilidades, carrera
- Para preguntas generales simples (saludos, idiomas, preguntas b√°sicas): responder brevemente y redirigir hacia John
- Para preguntas muy espec√≠ficas fuera de tema: redirigir educadamente hacia John

IMPORTANTE - IDIOMA DE RESPUESTA:
- Si la pregunta est√° en INGL√âS ‚Üí responder en INGL√âS
- Si la pregunta est√° en ESPA√ëOL ‚Üí responder en ESPA√ëOL
- Detectar autom√°ticamente el idioma de la pregunta y responder en el mismo idioma

EJEMPLOS DE RESPUESTAS:
- "Do you speak English?" ‚Üí "Yes, I can communicate in English. I'm here to help you learn about John Batista's professional experience. What would you like to know about him?"
- "Who is John?" ‚Üí "John Batista is a skilled developer and programmer. I'm here to provide information about his professional experience, projects, and skills. What specifically would you like to know about him?"
- "¬øHablas espa√±ol?" ‚Üí "S√≠, puedo comunicarme en espa√±ol. Estoy aqu√≠ para ayudarte a conocer sobre la experiencia profesional de John Batista. ¬øQu√© te gustar√≠a saber sobre √©l?"
- "¬øQui√©n es John?" ‚Üí "John Batista es un desarrollador experimentado. Estoy aqu√≠ para proporcionarte informaci√≥n sobre su experiencia profesional, proyectos y habilidades. ¬øQu√© te gustar√≠a saber espec√≠ficamente sobre √©l?"

Para preguntas sobre John: usar la informaci√≥n disponible para dar respuestas completas y detalladas EN EL MISMO IDIOMA de la pregunta.
Para preguntas muy espec√≠ficas fuera de tema: redirigir educadamente EN EL MISMO IDIOMA.

Mant√©n un tono profesional y amigable.`;
            
            if (searchResults.length > 0) {
                const context_info = searchResults.map((result) => result.content).join('\n\n');
                systemContent += `\n\nüìö INFORMACI√ìN DISPONIBLE SOBRE JOHN:\n${context_info}\n\nUsa √öNICAMENTE esta informaci√≥n para responder. Si la pregunta es sobre John pero no puedes responderla con esta informaci√≥n, di que no tienes esa informaci√≥n espec√≠fica EN EL MISMO IDIOMA de la pregunta.`;
                context.log('üìù Contexto agregado al prompt');
            } else {
                systemContent += '\n\n‚ö†Ô∏è No se encontr√≥ informaci√≥n espec√≠fica para esta consulta. Para preguntas generales simples, responde brevemente y redirige hacia John EN EL MISMO IDIOMA. Para preguntas espec√≠ficas sobre John, di que no tienes esa informaci√≥n EN EL MISMO IDIOMA.';
            }

            // 4. Llamada a Azure OpenAI para generar respuesta
            context.log('ü§ñ Generando respuesta con Azure OpenAI...');
            const chatUrl = `${azureEndpoint}openai/deployments/${deploymentName}/chat/completions?api-version=${apiVersion}`;
            
            const chatResponse = await fetch(chatUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'api-key': apiKey
                },
                body: JSON.stringify({
                    messages: [
                        {
                            role: "system",
                            content: systemContent
                        },
                        {
                            role: "user", 
                            content: message
                        }
                    ],
                    max_tokens: 800,
                    temperature: 0.7
                })
            });

            if (!chatResponse.ok) {
                const errorText = await chatResponse.text();
                context.log('‚ùå Error en Azure OpenAI:', chatResponse.status, errorText);
                throw new Error(`Azure OpenAI API error: ${chatResponse.status}`);
            }

            const chatData = await chatResponse.json();
            const answer = chatData.choices[0].message.content;

            context.log('‚úÖ Respuesta generada exitosamente');
            context.log('üìä Stats:', { 
                searchResults: searchResults.length, 
                sources: sources.length,
                answerLength: answer.length 
            });

            return {
                status: 200,
                body: JSON.stringify({ 
                    answer: answer,
                    sources: sources
                }),
                headers: { 
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                }
            };

        } catch (error) {
            context.log('‚ùå Error general en la API:', error);
            context.log('‚ùå Error stack:', error.stack);
            context.log('‚ùå Error message:', error.message);
            
            return {
                status: 500,
                body: JSON.stringify({ 
                    answer: 'Lo siento, hubo un error procesando tu solicitud. Error: ' + error.message,
                    sources: []
                }),
                headers: { 'Content-Type': 'application/json' }
            };
        }
    }
});
